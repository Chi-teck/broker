version: '3'
vars:
  # Main.
  PROJECT_NAME: example
  USER_NAME: broker
  IMAGE: 'my/{{.PROJECT_NAME}}'
  PROJECT_DIR: $(pwd)

  # Network.
  IP: '172.30.0.1'
  SUBNET: '172.30.0.0/16'
  GATEWAY: '172.30.0.254'
  NETWORK_NAME: 'my'

  # Tests.
  CONTAINER_IS_STARTED: '[[ $(docker inspect {{.PROJECT_NAME }} --format \{\{.State.Status\}\}) == running ]]'
  CONTAINER_EXISTS: 'docker container inspect {{.PROJECT_NAME}} > /dev/null 2>&1]'
  IMAGE_EXISTS: 'docker inspect {{.IMAGE}} > /dev/null 2>&1'
  NETWORK_EXISTS: 'docker network inspect {{.NETWORK_NAME}} > /dev/null 2>&1'

silent: true
tasks:
  default:
    cmds:
      - task --list

  status:
    desc: 'Display project status.'
    cmds:
      - 'echo -----------------------------'
      - 'echo -e -n " Image exists:\t\t " && {{.IMAGE_EXISTS}} && echo Yes || echo No'
      - 'echo -e -n " Network exists:\t " && {{.NETWORK_EXISTS}} && echo Yes || echo No'
      - 'echo -e -n " Container exists:\t " && {{.CONTAINER_EXISTS}} && echo Yes || echo No'
      - 'echo -e -n " Container is started:\t " && {{.CONTAINER_IS_STARTED}} && echo Yes || echo No'
      - 'echo -----------------------------'
    silent: true

  create:
    desc: 'Create container.'
    cmds:
      - docker create
        --name={{.PROJECT_NAME}}
        --hostname={{.PROJECT_NAME}}
        --net={{.NETWORK_NAME}}
        --ip={{.IP}}
        --volume=$HOME/Downloads:/mnt/host/downloads
        --volume={{.PROJECT_DIR}}/mnt/ssh:/home/{{.USER_NAME}}/.ssh
        --volume={{.PROJECT_DIR}}/mnt/mariadb:/var/mysql
        --volume={{.PROJECT_DIR}}/mnt/www:/var/www
        {{.IMAGE}}
    preconditions:
      - sh: '{{.IMAGE_EXISTS}}'
        msg: 'Image "{{.IMAGE}}" does not exist.'
      - sh: '{{.NETWORK_EXISTS}}'
        msg: 'Network "{{.NETWORK_NAME}}" does not exist.'
    status:
      - '{{.CONTAINER_EXISTS}}'

  start:
    desc: 'Start the container.'
    cmds:
      - docker start {{.PROJECT_NAME}}
    preconditions:
      - sh: '{{.CONTAINER_EXISTS}}'
        msg: 'Container "{{.PROJECT_NAME }}" does not exist.'
    status:
      - '{{.CONTAINER_IS_STARTED}}'

  connect:
    desc: 'Open Bash session in the container.'
    interactive: true
    cmds:
      - docker exec -e TERM=${TERM} -u {{.USER_NAME}} -it {{.PROJECT_NAME}}
        /bin/bash -c "stty rows $(tput lines) && exec bash"
    preconditions:
      - sh: '{{.CONTAINER_IS_STARTED}}'
        msg: 'Container is "{{.PROJECT_NAME }}" is not running'

  stop:
    desc: 'Stop the container.'
    cmds:
      - docker stop {{.PROJECT_NAME}}
    status:
      - '! {{.CONTAINER_IS_STARTED}}'

  remove:
    desc: 'Remove the container.'
    deps:
      - task: stop
    cmds:
      - docker rm {{.PROJECT_NAME}}
    status:
      - '! {{.CONTAINER_EXISTS}}'

  network-create:
    desc: 'Create a network.'
    cmds:
      - docker network create --subnet={{.SUBNET}} --gateway={{.GATEWAY}} {{.NETWORK_NAME}}
    status:
      - '{{.NETWORK_EXISTS}}'

  network-remove:
    desc: 'Remove a network.'
    cmds:
      - docker network remove {{.NETWORK_NAME}}
    status:
      - '! {{.NETWORK_EXISTS}}'

  image-build:
    desc: 'Rebuild the image.'
    cmds:
      - docker build --build-arg USER_NAME={{.USER_NAME}} --build-arg USER_UID=$(id -u) --build-arg USER_GID=$(id -g) -t {{.IMAGE}} image

  image-remove:
    desc: 'Remove the image.'
    cmds:
      - docker rmi {{.IMAGE}}
    preconditions:
      - sh: '! {{.CONTAINER_EXISTS}}'
        msg: 'Container "{{.PROJECT_NAME }}" still exists.'

  rebuild:
    desc: 'Rebuild everything, start the container and connect to it.'
    cmds:
      - task: remove
      - task: image-build
      - task: network-create
      - task: create
      - task: start
      - task: connect

  edit-task:
    desc: 'Edit Taskfile.'
    cmds:
      - $EDITOR ./Taskfile.yml

  edit-image:
    desc: 'Edit Dockerfile.'
    cmds:
      - $EDITOR ./image/Dockerfile

  edit-hosts:
    desc: 'Edit /etc/hosts file.'
    cmds:
      - sudo $EDITOR /etc/hosts

  phpstorm-open:
    desc: 'Open the project in PhpStorm'
    cmds:
      - phpstorm ./mnt/www
